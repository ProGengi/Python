#
#
#
#
#
#简单消息：将一条消息存储到变量中，再将其打印出来。
message = 'This is a message.'
print(message)


# 多条简单消息： 将一条消息存储到变量中，将其打印出来；再将变量的值修改为一条新消息，并将其打印出来。
message = 'hello man.'
print(message)
message = 'hello woman.'
print(message)


#个性化消息： 将用户的姓名存到一个变量中，并向该用户显示一条消息。显示的消息应非常简单，如“Hello Eric, would you like to learn some Python today?”。
username = 'hangyq'
print('"Hello ' + username + ' ,would you like to learn some python today?"')


#调整名字的大小写： 将一个人名存储到一个变量中，再以小写、大写和首字母大写的方式显示这个人名。
username = 'hangyq'
print(username.title())
print(username.upper())
print(username.lower())

#名言： 找一句你钦佩的名人说的名言，将这个名人的姓名和他的名言打印出来。输出应类似于下面这样（包括引号）：
#Albert Einstein once said, “A person who never made a mistake never tried anything new.”
username = 'hangyq'
print(username + ' once said , "A person who never made a mistake never tried anything new.”')


#名言2： 重复练习2-5，但将名人的姓名存储在变量famous_person 中，再创建要显示的消息，并将其存储在变量message 中，然后打印这条消息。
famous_person = 'hangyq'
message = 'A person who never made a mistake never tried anything new.'
print(famous_person + ' once said," ' + message + '"')


#剔除人名中的空白： 存储一个人名，并在其开头和末尾都包含一些空白字符。务必至少使用字符组合"\t" 和"\n" 各一次。
#打印这个人名，以显示其开头和末尾的空白。然后，分别使用剔除函数lstrip() 、rstrip() 和strip() 对人名进行处理，并将结果打印出来。
username = '\thangyq\n'
print(username)
print(username.lstrip())
print(username.rstrip())
print(username.strip())



#数字8： 编写4个表达式，它们分别使用加法、减法、乘法和除法运算，但结果都是数字8
a = 3
b = 5
print(str(a) + '+' + str(b) + '=' + str(a+b))
a = 10
b = 2
print(str(a) + '-' + str(b) + '=' + str(a-b))
a = 2
b = 4
print(str(a) + '*' + str(b) + '=' + str(a*b))
a = 13
b = 3
print(str(a) + '/' + str(b) + '=' + str(a/b))


#姓名： 将一些朋友的姓名存储在一个列表中，并将其命名为names 。依次访问该列表中的每个元素，从而将每个朋友的姓名都打印出来。
names = ['hangyq','zhangsan','lisi']
print(names[0])
print(names[1])
print(names[2])


#问候语： 继续使用练习3-1中的列表，但不打印每个朋友的姓名，而为每人打印一条消息。每条消息都包含相同的问候语，但抬头为相应朋友的姓名。
print('hello, ' + names[0].title())
print('hello, ' + names[1].title())
print('hello, ' + names[2].title())

#嘉宾名单 ：如果你可以邀请任何人一起共进晚餐（无论是在世的还是故去的），你会邀请哪些人？请创建一个列表，其中包含至少3个你想邀请的人；然后，使用
#这个列表打印消息，邀请这些人来与你共进晚餐。
names = ['yasuo','ruiwen','zed','lisen']
for i in names:
	print(i)


# 修改嘉宾名单 ：你刚得知有位嘉宾无法赴约，因此需要另外邀请一位嘉宾。
#以完成练习3-4时编写的程序为基础，在程序末尾添加一条print 语句，指出哪位嘉宾无法赴约。
#修改嘉宾名单，将无法赴约的嘉宾的姓名替换为新邀请的嘉宾的姓名。
#再次打印一系列消息，向名单中的每位嘉宾发出邀请。
print(names[2] + ' will not attend my party.')
del names[2]
names.insert(2,'master yi')
for i in names:
	print(i + ' will attend my party')


#3-6 添加嘉宾 ：你刚找到了一个更大的餐桌，可容纳更多的嘉宾。请想想你还想邀请哪三位嘉宾。
#以完成练习3-4或练习3-5时编写的程序为基础，在程序末尾添加一条print 语句，指出你找到了一个更大的餐桌。
#使用insert() 将一位新嘉宾添加到名单开头。
#使用insert() 将另一位新嘉宾添加到名单中间。
#使用append() 将最后一位新嘉宾添加到名单末尾。
#打印一系列消息，向名单中的每位嘉宾发出邀请。
print('I have a bigger table, i will invite another 3 people.')
names.insert(0,'manwang')
names.insert(-1,'hanbing')
names.append('gaylun')
print(names)


#3-7 缩减名单 ：你刚得知新购买的餐桌无法及时送达，因此只能邀请两位嘉宾。
#以完成练习3-6时编写的程序为基础，在程序末尾添加一行代码，打印一条你只能邀请两位嘉宾共进晚餐的消息。
#使用pop() 不断地删除名单中的嘉宾，直到只有两位嘉宾为止。每次从名单中弹出一位嘉宾时，都打印一条消息，让该嘉宾知悉你很抱歉，无法邀请他来共进晚餐。
#对于余下的两位嘉宾中的每一位，都打印一条消息，指出他依然在受邀人之列。
#使用del 将最后两位嘉宾从名单中删除，让名单变成空的。打印该名单，核实程序结束时名单确实是空的。
print('sorry, we just have two tableware, so we just on leave two people.')
while len(names)>2:
	leave_name = names.pop()
	print('Sorry,' + leave_name)

for i in names:
	print(i + ' You are invited.')
del names[0]
del names[0]
print(names)		


#3-8 放眼世界 ：想出至少5个你渴望去旅游的地方。
#将这些地方存储在一个列表中，并确保其中的元素不是按字母顺序排列的。
#按原始排列顺序打印该列表。不要考虑输出是否整洁的问题，只管打印原始Python列表。
#使用sorted() 按字母顺序打印这个列表，同时不要修改它。
#再次打印该列表，核实排列顺序未变。
#使用sorted() 按与字母顺序相反的顺序打印这个列表，同时不要修改它。
#再次打印该列表，核实排列顺序未变。
#使用reverse() 修改列表元素的排列顺序。打印该列表，核实排列顺序确实变了。
#使用reverse() 再次修改列表元素的排列顺序。打印该列表，核实已恢复到原来的排列顺序。
#使用sort() 修改该列表，使其元素按字母顺序排列。打印该列表，核实排列顺序确实变了。
#使用sort() 修改该列表，使其元素按与字母顺序相反的顺序排列。打印该列表，核实排列顺序确实变了。
pops = ['shanghai','shenzhen','beijing','guangzhou','nantong']
print(pops)
print(sorted(pops))
print(pops)
pops.reverse()
print(pops)
pops.sort()
print(pops)
pops.sort(reverse=True)
print(pops)



#4-1 比萨 ：想出至少三种你喜欢的比萨，将其名称存储在一个列表中，再使用for 循环将每种比萨的名称都打印出来。
#修改这个for 循环，使其打印包含比萨名称的句子，而不仅仅是比萨的名称。对于每种比萨，都显示一行输出，如“I like pepperoni pizza”。
#在程序末尾添加一行代码，它不在for 循环中，指出你有多喜欢比萨。输出应包含针对每种比萨的消息，还有一个总结性句子，如“I really love pizza!”。
pizzas = ['a', 'b','c']
for pizza in pizzas:
	print('i like pizza ' + pizza)
print('i really like pizza')	


#4-3 数到20 ：使用一个for 循环打印数字1~20（含）。
for i in range(1,21):
	print(i)



#4-4 一百万 ：创建一个列表，其中包含数字1~1 000 000，再使用一个for 循环将这些数字打印出来（如果输出的时间太长，按Ctrl + C停止输出，或关闭输出窗口）。
#numbers = range(1,1000001)
#for i in numbers:
#	print(i)
	

#4-5 计算1~1 000 000的总和 ：创建一个列表，其中包含数字1~1 000 000，再使用min() 和max() 核实该列表确实是从1开始，到1 000 000结束的。另外，对这个列表
#调用函数sum() ，看看Python将一百万个数字相加需要多长时间。
numbers = range(1,1000001)
print(max(numbers))
print(min(numbers))
print(sum(numbers))


#4-6 奇数 ：通过给函数range() 指定第三个参数来创建一个列表，其中包含1~20的奇数；再使用一个for 循环将这些数字都打印出来。
numbers = range(1,20,2)
for i in numbers:
	print(i)


#4-7 3的倍数 ：创建一个列表，其中包含3~30内能被3整除的数字；再使用一个for 循环将这个列表中的数字都打印出来。
numbers = range(3,20,3)
for i in numbers:
	print(i)


#4-8 立方 ：将同一个数字乘三次称为立方。例如，在Python中，2的立方用2**3 表示。请创建一个列表，其中包含前10个整数（即1~10）的立方，再使用一个for 循
#环将这些立方数都打印出来。
numbers = []
for i in range(1,11):
	i = i**3
	numbers.append(i)
print(numbers)	


#4-9 立方解析 ：使用列表解析生成一个列表，其中包含前10个整数的立方。
numbers = [value**2 for value in range(1,11)]
print(numbers)


#4-10 切片 ：选择你在本章编写的一个程序，在末尾添加几行代码，以完成如下任务。
#打印消息“The first three items in the list are:”，再使用切片来打印列表的前三个元素。
#打印消息“Three items from the middle of the list are:”，再使用切片来打印列表中间的三个元素。
#打印消息“The last three items in the list are:”，再使用切片来打印列表末尾的三个元素。








#4-11 你的比萨和我的比萨 ：在你为完成练习4-1而编写的程序中，创建比萨列表的副本，并将其存储到变量friend_pizzas 中，再完成如下任务。
#在原来的比萨列表中添加一种比萨。
#在列表friend_pizzas 中添加另一种比萨。
#核实你有两个不同的列表。为此，打印消息“My favorite pizzas are:”，再使用一个for 循环来打印第一个列表；打印消息“My friend's favorite pizzas are:”，再使用一
#个for 循环来打印第二个列表。核实新增的比萨被添加到了正确的列表中。

#4-12 使用多个循环 ：在本节中，为节省篇幅，程序foods.py的每个版本都没有使用for 循环来打印列表。请选择一个版本的foods.py，在其中编写两个for 循环，将各
#个食品列表都打印出来。

#4-13 自助餐 ：有一家自助式餐馆，只提供五种简单的食品。请想出五种简单的食品，并将其存储在一个元组中。
#使用一个for 循环将该餐馆提供的五种食品都打印出来。
#尝试修改其中的一个元素，核实Python确实会拒绝你这样做。
#餐馆调整了菜单，替换了它提供的其中两种食品。请编写一个这样的代码块：给元组变量赋值，并使用一个for 循环将新元组的每个元素都打印出来。

#5-1 条件测试 ：编写一系列条件测试；将每个测试以及你对其结果的预测和实际结果都打印出来。

#5-2 更多的条件测试 ：你并非只能创建10个测试。如果你想尝试做更多的比较，可再编写一些测试，并将它们加入到conditional_tests.py中。对于下面列出的各种测
#试，至少编写一个结果为True 和False 的测试。
#检查两个字符串相等和不等。
#使用函数lower() 的测试。
#检查两个数字相等、不等、大于、小于、大于等于和小于等于。
#使用关键字and 和or 的测试。
#测试特定的值是否包含在列表中。
#测试特定的值是否未包含在列表中。

#5-3 外星人颜色#1 ：假设在游戏中刚射杀了一个外星人，请创建一个名为alien_color 的变量，并将其设置为'green' 、'yellow' 或'red' 。
#编写一条if 语句，检查外星人是否是绿色的；如果是，就打印一条消息，指出玩家获得了5个点。
#编写这个程序的两个版本，在一个版本中上述测试通过了，而在另一个版本中未通过（未通过测试时没有输出）。

#5-4 外星人颜色#2 ：像练习5-3那样设置外星人的颜色，并编写一个if-else 结构。
#如果外星人是绿色的，就打印一条消息，指出玩家因射杀该外星人获得了5个点。
#如果外星人不是绿色的，就打印一条消息，指出玩家获得了10个点。
#编写这个程序的两个版本，在一个版本中执行if 代码块，而在另一个版本中执行else 代码块。

#5-5 外星人颜色#3 ：将练习5-4中的if-else 结构改为if-elif-else 结构。
#如果外星人是绿色的，就打印一条消息，指出玩家获得了5个点。
#如果外星人是黄色的，就打印一条消息，指出玩家获得了10个点。
#如果外星人是红色的，就打印一条消息，指出玩家获得了15个点。
#编写这个程序的三个版本，它们分别在外星人为绿色、黄色和红色时打印一条消息。

#5-6 人生的不同阶段 ：设置变量age 的值，再编写一个if-elif-else 结构，根据age 的值判断处于人生的哪个阶段。
#如果一个人的年龄小于2岁，就打印一条消息，指出他是婴儿。
#果一个人的年龄为2（含）～4岁，就打印一条消息，指出他正蹒跚学步。
#如果一个人的年龄为4（含）～13岁，就打印一条消息，指出他是儿童。
#如果一个人的年龄为13（含）～20岁，就打印一条消息，指出他是青少年。
#如果一个人的年龄为20（含）～65岁，就打印一条消息，指出他是成年人。
#如果一个人的年龄超过65（含）岁，就打印一条消息，指出他是老年人。

#5-7 喜欢的水果 ：创建一个列表，其中包含你喜欢的水果，再编写一系列独立的if 语句，检查列表中是否包含特定的水果。
#将该列表命名为favorite_fruits ，并在其中包含三种水果。
#编写5条if 语句，每条都检查某种水果是否包含在列表中，如果包含在列表中，就打印一条消息，如“You really like bananas!”。

#5-8 以特殊方式跟管理员打招呼 ：创建一个至少包含5个用户名的列表，且其中一个用户名为'admin' 。想象你要编写代码，在每位用户登录网站后都打印一条问
#候消息。遍历用户名列表，并向每位用户打印一条问候消息。
#如果用户名为'admin' ，就打印一条特殊的问候消息，如“Hello admin, would you like to see a status report?”。
#否则，打印一条普通的问候消息，如“Hello Eric, thank you for logging in again”。

#5-9 处理没有用户的情形 ：在为完成练习5-8编写的程序中，添加一条if 语句，检查用户名列表是否为空。
#如果为空，就打印消息“We need to find some users!”。
#删除列表中的所有用户名，确定将打印正确的消息。

#5-10 检查用户名 ：按下面的说明编写一个程序，模拟网站确保每位用户的用户名都独一无二的方式。
#创建一个至少包含5个用户名的列表，并将其命名为current_users 。
#再创建一个包含5个用户名的列表，将其命名为new_users ，并确保其中有一两个用户名也包含在列表current_users 中。
#遍历列表new_users ，对于其中的每个用户名，都检查它是否已被使用。如果是这样，就打印一条消息，指出需要输入别的用户名；否则，打印一条消息，指
#出这个用户名未被使用。
#确保比较时不区分大消息；换句话说，如果用户名'John' 已被使用，应拒绝用户名'JOHN' 。

#5-11 序数 ：序数表示位置，如1st和2nd。大多数序数都以th结尾，只有1、2和3例外。
#在一个列表中存储数字1~9。
#遍历这个列表。
#在循环中使用一个if-elif-else 结构，以打印每个数字对应的序数。输出内容应为1st 、2nd 、3rd 、4th 、5th 、6th 、7th 、8th 和9th ，但每个序
#数都独占一行。

#6-1 人 ：使用一个字典来存储一个熟人的信息，包括名、姓、年龄和居住的城市。该字典应包含键first_name 、last_name 、age 和city 。将存储在该字典中
#的每项信息都打印出来。

#6-2 喜欢的数字 ：使用一个字典来存储一些人喜欢的数字。请想出5个人的名字，并将这些名字用作字典中的键；想出每个人喜欢的一个数字，并将这些数字作为值存
#储在字典中。打印每个人的名字和喜欢的数字。为让这个程序更有趣，通过询问朋友确保数据是真实的。

#6-3 词汇表 ：Python字典可用于模拟现实生活中的字典，但为避免混淆，我们将后者称为词汇表。
#想出你在前面学过的5个编程词汇，将它们用作词汇表中的键，并将它们的含义作为值存储在词汇表中。
#以整洁的方式打印每个词汇及其含义。为此，你可以先打印词汇，在它后面加上一个冒号，再打印词汇的含义；也可在一行打印词汇，再使用换行符（\n ）插
#入一个空行，然后在下一行以缩进的方式打印词汇的含义。


#6-4 词汇表2 ：既然你知道了如何遍历字典，现在请整理你为完成练习6-3而编写的代码，将其中的一系列print 语句替换为一个遍历字典中的键和值的循环。确定该
#循环正确无误后，再在词汇表中添加5个Python术语。当你再次运行这个程序时，这些新术语及其含义将自动包含在输出中。

#6-5 河流 ：创建一个字典，在其中存储三条大河流及其流经的国家。其中一个键—值对可能是'nile': 'egypt' 。
#使用循环为每条河流打印一条消息，如“The Nile runs through Egypt.”。
#使用循环将该字典中每条河流的名字都打印出来。
#使用循环将该字典包含的每个国家的名字都打印出来。

#6-6 调查 ：在6.3.1节编写的程序favorite_languages.py中执行以下操作。
#创建一个应该会接受调查的人员名单，其中有些人已包含在字典中，而其他人未包含在字典中。
#遍历这个人员名单，对于已参与调查的人，打印一条消息表示感谢。对于还未参与调查的人，打印一条消息邀请他参与调查。


#6-7 人 ：在为完成练习6-1而编写的程序中，再创建两个表示人的字典，然后将这三个字典都存储在一个名为people 的列表中。遍历这个列表，将其中每个人的所有
#信息都打印出来。

#6-8 宠物 ：创建多个字典，对于每个字典，都使用一个宠物的名称来给它命名；在每个字典中，包含宠物的类型及其主人的名字。将这些字典存储在一个名为pets
#的列表中，再遍历该列表，并将宠物的所有信息都打印出来。

#6-9 喜欢的地方 ：创建一个名为favorite_places 的字典。在这个字典中，将三个人的名字用作键；对于其中的每个人，都存储他喜欢的1~3个地方。为让这个练
#习更有趣些，可让一些朋友指出他们喜欢的几个地方。遍历这个字典，并将其中每个人的名字及其喜欢的地方打印出来。

#6-10 喜欢的数字 ：修改为完成练习6-2而编写的程序，让每个人都可以有多个喜欢的数字，然后将每个人的名字及其喜欢的数字打印出来。

#6-11 城市 ：创建一个名为cities 的字典，其中将三个城市名用作键；对于每座城市，都创建一个字典，并在其中包含该城市所属的国家、人口约数以及一个有关该
#城市的事实。在表示每座城市的字典中，应包含country 、population 和fact 等键。将每座城市的名字以及有关它们的信息都打印出来。

#6-12 扩展 ：本章的示例足够复杂，可以以很多方式进行扩展了。请对本章的一个示例进行扩展：添加键和值、调整程序要解决的问题或改进输出的格式。

#7-1 汽车租赁 ：编写一个程序，询问用户要租赁什么样的汽车，并打印一条消息，如“Let me see if I can find you a Subaru”。

#7-2 餐馆订位 ：编写一个程序，询问用户有多少人用餐。如果超过8人，就打印一条消息，指出没有空桌；否则指出有空桌。

#7-3 10的整数倍 ：让用户输入一个数字，并指出这个数字是否是10的整数倍。

#7-4 比萨配料 ：编写一个循环，提示用户输入一系列的比萨配料，并在用户输入'quit' 时结束循环。每当用户输入一种配料后，都打印一条消息，说我们会在比萨
#中添加这种配料。

#7-5 电影票 ：有家电影院根据观众的年龄收取不同的票价：不到3岁的观众免费；3~12岁的观众为10美元；超过12岁的观众为15美元。请编写一个循环，在其中询问用
#户的年龄，并指出其票价。

#7-6 三个出口 ：以另一种方式完成练习7-4或练习7-5，在程序中采取如下所有做法。
#在while 循环中使用条件测试来结束循环。
#使用变量active 来控制循环结束的时机。
#使用break 语句在用户输入'quit' 时退出循环。

#7-7 无限循环 ：编写一个没完没了的循环，并运行它（要结束该循环，可按Ctrl +C，也可关闭显示输出的窗口）。

#7-8 熟食店 ：创建一个名为sandwich_orders 的列表，在其中包含各种三明治的名字；再创建一个名为finished_sandwiches 的空列表。遍历列
#表sandwich_orders ，对于其中的每种三明治，都打印一条消息，如I made your tuna sandwich ，并将其移到列表finished_sandwiches 。所有三明
#治都制作好后，打印一条消息，将这些三明治列出来。

#7-9 五香烟熏牛肉（pastrami）卖完了 ：使用为完成练习7-8而创建的列表sandwich_orders ，并确保'pastrami' 在其中至少出现了三次。在程序开头附近添加
#这样的代码：打印一条消息，指出熟食店的五香烟熏牛肉卖完了；再使用一个while 循环将列表sandwich_orders 中的'pastrami' 都删除。确认最终的列
#表finished_sandwiches 中不包含'pastrami' 。

#7-10 梦想的度假胜地 ：编写一个程序，调查用户梦想的度假胜地。使用类似于“If you could visit one place in the world, where would you go?”的提示，并编写一个打印调查
#结果的代码块。

#8-1 消息 ：编写一个名为display_message() 的函数，它打印一个句子，指出你在本章学的是什么。调用这个函数，确认显示的消息正确无误。

#8-2 喜欢的图书 ：编写一个名为favorite_book() 的函数，其中包含一个名为title 的形参。这个函数打印一条消息，如One of my favorite books is
#Alice in Wonderland 。调用这个函数，并将一本图书的名称作为实参传递给它。


#8-3 T恤 ：编写一个名为make_shirt() 的函数，它接受一个尺码以及要印到T恤上的字样。这个函数应打印一个句子，概要地说明T恤的尺码和字样。
#使用位置实参调用这个函数来制作一件T恤；再使用关键字实参来调用这个函数。

#8-4 大号T恤 ：修改函数make_shirt() ，使其在默认情况下制作一件印有字样“I love Python”的大号T恤。调用这个函数来制作如下T恤：一件印有默认字样的大号T
#恤、一件印有默认字样的中号T恤和一件印有其他字样的T恤（尺码无关紧要）。

#8-5 城市 ：编写一个名为describe_city() 的函数，它接受一座城市的名字以及该城市所属的国家。这个函数应打印一个简单的句子，如Reykjavik is in
#Iceland 。给用于存储国家的形参指定默认值。为三座不同的城市调用这个函数，且其中至少有一座城市不属于默认国家。


#8-6 城市名 ：编写一个名为city_country() 的函数，它接受城市的名称及其所属的国家。

#8-7 专辑 ：编写一个名为make_album() 的函数，它创建一个描述音乐专辑的字典。这个函数应接受歌手的名字和专辑名，并返回一个包含这两项信息的字典。使
#用这个函数创建三个表示不同专辑的字典，并打印每个返回的值，以核实字典正确地存储了专辑的信息。
#给函数make_album() 添加一个可选形参，以便能够存储专辑包含的歌曲数。如果调用这个函数时指定了歌曲数，就将这个值添加到表示专辑的字典中。调用这个
#函数，并至少在一次调用中指定专辑包含的歌曲数。

#8-8 用户的专辑 ：在为完成练习8-7编写的程序中，编写一个while 循环，让用户输入一个专辑的歌手和名称。获取这些信息后，使用它们来调用函
#数make_album() ，并将创建的字典打印出来。在这个while 循环中，务必要提供退出途径。

#8-9 魔术师 ：创建一个包含魔术师名字的列表，并将其传递给一个名为show_magicians() 的函数，这个函数打印列表中每个魔术师的名字。

#8-10 了不起的魔术师 ：在你为完成练习8-9而编写的程序中，编写一个名为make_great() 的函数，对魔术师列表进行修改，在每个魔术师的名字中都加入字样“the
#Great”。调用函数show_magicians() ，确认魔术师列表确实变了。

#8-11 不变的魔术师 ：修改你为完成练习8-10而编写的程序，在调用函数make_great() 时，向它传递魔术师列表的副本。由于不想修改原始列表，请返回修改后的
#列表，并将其存储到另一个列表中。分别使用这两个列表来调用show_magicians() ，确认一个列表包含的是原来的魔术师名字，而另一个列表包含的是添加了字
#样“the Great”的魔术师名字。

#8-12 三明治 ：编写一个函数，它接受顾客要在三明治中添加的一系列食材。这个函数只有一个形参（它收集函数调用中提供的所有食材），并打印一条消息，对顾客
#点的三明治进行概述。调用这个函数三次，每次都提供不同数量的实参。

#8-13 用户简介 ：复制前面的程序user_profile.py，在其中调用build_profile() 来创建有关你的简介；调用这个函数时，指定你的名和姓，以及三个描述你的键-值
#对。

#8-14 汽车 ：编写一个函数，将一辆汽车的信息存储在一个字典中。这个函数总是接受制造商和型号，还接受任意数量的关键字实参。这样调用这个函数：提供必不可
#少的信息，以及两个名称—值对，如颜色和选装配件。这个函数必须能够像下面这样进行调用：car = make_car('subaru', 'outback', color='blue', tow_package=True)
#打印返回的字典，确认正确地处理了所有的信息。

#8-15 打印模型 ：将示例print_models.py中的函数放在另一个名为printing_functions.py的文件中；在print_models.py的开头编写一条import 语句，并修改这个文件以使用导
#入的函数。

#8-16 导入 ：选择一个你编写的且只包含一个函数的程序，并将这个函数放在另一个文件中。在主程序文件中，使用下述各种方法导入这个函数，再调用它：


#9-1 餐馆 ：创建一个名为Restaurant 的类，其方法__init__() 设置两个属性：restaurant_name 和cuisine_type 。创建一个名
#为describe_restaurant() 的方法和一个名为open_restaurant() 的方法，其中前者打印前述两项信息，而后者打印一条消息，指出餐馆正在营业。
#根据这个类创建一个名为restaurant 的实例，分别打印其两个属性，再调用前述两个方法。

#9-2 三家餐馆 ：根据你为完成练习9-1而编写的类创建三个实例，并对每个实例调用方法describe_restaurant() 。

#9-3 用户 ：创建一个名为User 的类，其中包含属性first_name 和last_name ，还有用户简介通常会存储的其他几个属性。在类User 中定义一个名
#为describe_user() 的方法，它打印用户信息摘要；再定义一个名为greet_user() 的方法，它向用户发出个性化的问候。
#创建多个表示不同用户的实例，并对每个实例都调用上述两个方法。

#9-4 就餐人数 ：在为完成练习9-1而编写的程序中，添加一个名为number_served 的属性，并将其默认值设置为0。根据这个类创建一个名为restaurant 的实
#例；打印有多少人在这家餐馆就餐过，然后修改这个值并再次打印它。
#添加一个名为set_number_served() 的方法，它让你能够设置就餐人数。调用这个方法并向它传递一个值，然后再次打印这个值。
#添加一个名为increment_number_served() 的方法，它让你能够将就餐人数递增。调用这个方法并向它传递一个这样的值：你认为这家餐馆每天可能接待的就
#餐人数。

#9-5 尝试登录次数 ：在为完成练习9-3而编写的User 类中，添加一个名为login_attempts 的属性。编写一个名为increment_login_attempts() 的方法，
#它将属性login_attempts 的值加1。再编写一个名为reset_login_attempts() 的方法，它将属性login_attempts 的值重置为0。
#根据User 类创建一个实例，再调用方法increment_login_attempts() 多次。打印属性login_attempts 的值，确认它被正确地递增；然后，调用方
#法reset_login_attempts() ，并再次打印属性login_attempts 的值，确认它被重置为0。

#9-6 冰淇淋小店 ：冰淇淋小店是一种特殊的餐馆。编写一个名为IceCreamStand 的类，让它继承你为完成练习9-1或练习9-4而编写的Restaurant 类。这两个版
#本的Restaurant 类都可以，挑选你更喜欢的那个即可。添加一个名为flavors 的属性，用于存储一个由各种口味的冰淇淋组成的列表。编写一个显示这些冰淇淋
#的方法。创建一个IceCreamStand 实例，并调用这个方法。

#9-7 管理员 ：管理员是一种特殊的用户。编写一个名为Admin 的类，让它继承你为完成练习9-3或练习9-5而编写的User 类。添加一个名为privileges 的属性，用
#于存储一个由字符串（如"can add post" 、"can delete post" 、"can ban user" 等）组成的列表。编写一个名为show_privileges() 的方法，它
#显示管理员的权限。创建一个Admin 实例，并调用这个方法。

#9-8 权限 ：编写一个名为Privileges 的类，它只有一个属性——privileges ，其中存储了练习9-7 所说的字符串列表。将方法show_privileges() 移到这
#个类中。在Admin 类中，将一个Privileges 实例用作其属性。创建一个Admin 实例，并使用方法show_privileges() 来显示其权限。

#9-9 电瓶升级 ：在本节最后一个electric_car.py版本中，给Battery 类添加一个名为upgrade_battery() 的方法。这个方法检查电瓶容量，如果它不是85，就将它
#设置为85。创建一辆电瓶容量为默认值的电动汽车，调用方法get_range() ，然后对电瓶进行升级，并再次调用get_range() 。你会看到这辆汽车的续航里程增
#加了。

#9-10 导入Restaurant 类 ：将最新的Restaurant 类存储在一个模块中。在另一个文件中，导入Restaurant 类，创建一个Restaurant 实例，并调
#用Restaurant 的一个方法，以确认import 语句正确无误。

#9-11 导入Admin 类 ：以为完成练习9-8而做的工作为基础，将User 、Privileges 和Admin 类存储在一个模块中，再创建一个文件，在其中创建一个Admin 实例
#并对其调用方法show_privileges() ，以确认一切都能正确地运行。

#9-12 多个模块 ：将User 类存储在一个模块中，并将Privileges 和Admin 类存储在另一个模块中。再创建一个文件，在其中创建一个Admin 实例，并对其调用方
#法show_privileges() ，以确认一切都依然能够正确地运行。

#9-13 使用OrderedDict ：在练习6-4中，你使用了一个标准字典来表示词汇表。请使用OrderedDict 类来重写这个程序，并确认输出的顺序与你在字典中添加键
#—值对的顺序一致。

#9-14 骰子 ：模块random 包含以各种方式生成随机数的函数，其中的randint() 返回一个位于指定范围内的整数，例如，下面的代码返回一个1~6内的整数：
#from random import randint
#x = randint(1, 6)
#创建一个Die 类，它包含一个名为sides 的属性，该属性的默认值为6。编写一个名为roll_die() 的方法，它打印位于1和骰子面数之间的随机数。创建一个6面
#的骰子，再掷10次。 创建一个10面的骰子和一个20面的骰子，并将它们都掷10次。

#9-15 Python Module of the Week ：要了解Python标准库，一个很不错的资源是网站Python Module of the Week。请访问http://pymotw.com/ 并查看其中的目录，在其中找一
#个你感兴趣的模块进行探索，或阅读模块collections 和random 的文档。

#10-1 Python学习笔记 ：在文本编辑器中新建一个文件，写几句话来总结一下你至此学到的Python知识，其中每一行都以“In Python you can”打头。将这个文件命名为
#learning_python.txt，并将其存储到为完成本章练习而编写的程序所在的目录中。编写一个程序，它读取这个文件，并将你所写的内容打印三次：第一次打印时读取整个
#文件；第二次打印时遍历文件对象；第三次打印时将各行存储在一个列表中，再在with 代码块外打印它们。

#10-2 C语言学习笔记 ：可使用方法replace() 将字符串中的特定单词都替换为另一个单词。下面是一个简单的示例，演示了如何将句子中的'dog' 替换为'cat'：
#>>> message = "I really like dogs."
#>>> message.replace('dog', 'cat')
#'I really like cats.'
#读取你刚创建的文件learning_python.txt中的每一行，将其中的Python都替换为另一门语言的名称，如C。将修改后的各行都打印到屏幕上。


#10-3 访客 ：编写一个程序，提示用户输入其名字；用户作出响应后，将其名字写入到文件guest.txt中。

#10-4 访客名单 ：编写一个while 循环，提示用户输入其名字。用户输入其名字后，在屏幕上打印一句问候语，并将一条访问记录添加到文件guest_book.txt中。确保这
#个文件中的每条记录都独占一行。

#10-5 关于编程的调查 ：编写一个while 循环，询问用户为何喜欢编程。每当用户输入一个原因后，都将其添加到一个存储所有原因的文件中。


#10-6 加法运算 ：提示用户提供数值输入时，常出现的一个问题是，用户提供的是文本而不是数字。在这种情况下，当你尝试将输入转换为整数时，将引
#发TypeError 异常。编写一个程序，提示用户输入两个数字，再将它们相加并打印结果。在用户输入的任何一个值不是数字时都捕获TypeError 异常，并打印一
#条友好的错误消息。对你编写的程序进行测试：先输入两个数字，再输入一些文本而不是数字。

#10-7 加法计算器 ：将你为完成练习10-6而编写的代码放在一个while 循环中，让用户犯错（输入的是文本而不是数字）后能够继续输入数字。

#10-8 猫和狗 ：创建两个文件cats.txt和dogs.txt，在第一个文件中至少存储三只猫的名字，在第二个文件中至少存储三条狗的名字。编写一个程序，尝试读取这些文件，
#并将其内容打印到屏幕上。将这些代码放在一个try-except 代码块中，以便在文件不存在时捕获FileNotFound 错误，并打印一条友好的消息。将其中一个文件
#移到另一个地方，并确认except 代码块中的代码将正确地执行。

#10-9 沉默的猫和狗 ：修改你在练习10-8中编写的except 代码块，让程序在文件不存在时一言不发。

#10-10 常见单词 ：访问项目Gutenberg（http://gutenberg.org/ ），并找一些你想分析的图书。下载这些作品的文本文件或将浏览器中的原始文本复制到文本文件中。
#你可以使用方法count() 来确定特定的单词或短语在字符串中出现了多少次。例如，下面的代码计算'row' 在一个字符串中出现了多少次：
#>>> line = "Row, row, row your boat"
#>>> line.count('row')
#2 
#>>> line.lower().count('row')
#3
#请注意，通过使用lower() 将字符串转换为小写，可捕捉要查找的单词出现的所有次数，而不管其大小写格式如何。
#编写一个程序，它读取你在项目Gutenberg中获取的文件，并计算单词'the' 在每个文件中分别出现了多少次。


#10-11 喜欢的数字 ：编写一个程序，提示用户输入他喜欢的数字，并使用json.dump() 将这个数字存储到文件中。再编写一个程序，从文件中读取这个值，并打印
#消息“I know your favorite number! It's _____.”。

#10-12 记住喜欢的数字 ：将练习10-11中的两个程序合而为一。如果存储了用户喜欢的数字，就向用户显示它，否则提示用户输入他喜欢的数字并将其存储到文件中。
#运行这个程序两次，看看它是否像预期的那样工作。

#10-13 验证用户 ：最后一个remember_me.py版本假设用户要么已输入其用户名，要么是首次运行该程序。我们应修改这个程序，以应对这样的情形：当前和最后一次
#运行该程序的用户并非同一个人。
#为此，在greet_user() 中打印欢迎用户回来的消息前，先询问他用户名是否是对的。如果不对，就调用get_new_username() 让用户输入正确的用户名。







